cons Z
cons S(x)

# Direct encoding as in https://github.com/inpla/inpla/blob/main/sample/AckSZ-3_5.in
# 4182049 reductions (with pre-reduced rhs)

def ack(a, b) = r
  | Z, y => S(y)
  | S(x), Z => ack(x, S(Z))
  | S(x), S(y) => (x1, x2) = dup(x); ack(x1, ack(S(x2),y))

#def ack(_, y) = r
#  | Z => S(y)
#  | S(x) => ack_Sx(y, x)
#
#def ack_Sx(_, x) = r
#  | Z => ack(x, S(Z))
#  | S(y) => (x1, x2) = dup(x); ack(x1, ack_Sx(y, x2))

let res = ack(3n, 8n)


# Encoding with pred from https://www.user.tu-berlin.de/o.runge/tfs/workshops/gtvmt08/Program/paper_38.pdf
# 8360028 reductions

def pred(_) = r
  | Z => Z
  | S(x) => x
def ack2(_, a) = b
  | Z => S(a)
  | S(x) => ack2b(a, S(x))
def ack2b(_, a) = b
  | Z => ack2(pred(a), S(Z))
  | S(y) => (a1, a2) = dup(a); ack2(pred(a1), ack2(a2, y))

let res2 = ack2(3n, 8n)



# Int-based encoding
# 2786001 reductions

cons Int[int]

def ackI(a, b) = r
  | Int[x], Int[y] if [x == 0] => Int[y + 1]
                   if [y == 0] => ackI(Int[x-1], Int[1])
                   else        => ackI(Int[x-1], ackI(Int[x], Int[y-1]))

let resI = ackI(Int[3], Int[8])


# Boxed Integer version using ref payloads
# 2786001 reductions

cons BoxedInt[ref]

def ackB(a, b) = r
  | BoxedInt[x], BoxedInt[y]
      if [de.szeiger.interact.MainTest.is0(x)] =>
        BoxedInt[de.szeiger.interact.MainTest.inc(y)]
        [eraseRef(x)]
      if [de.szeiger.interact.MainTest.is0(y)] =>
        ackB(BoxedInt[de.szeiger.interact.MainTest.dec(x)], BoxedInt[de.szeiger.interact.MainTest.box(1)])
        [eraseRef(y)]
      else =>
        [de.szeiger.interact.MainTest.ackHelper(x, x1, x2)]
        ackB(BoxedInt[x1], ackB(BoxedInt[x2], BoxedInt[de.szeiger.interact.MainTest.dec(y)]))

let resB = ackB(BoxedInt[de.szeiger.interact.MainTest.box(3)], BoxedInt[de.szeiger.interact.MainTest.box(8)])
