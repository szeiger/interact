# Natural numbers
cons Z
cons S(n)

# Erasure and Duplication
# def erase(_)
# def dup(_) = (a, b)
#   | dup(_) = (c, d) => (c, d)

# Addition
def _ + y = r
  | Z    => y
  | S(x) => x + S(y)

# Separate reductions
#match Z + y => y
#match S(x) + y => x + S(y)

#match erase(Z) => ()
#match erase(S(x)) => erase(x)
#match dup(Z) = (a, b) => a = Z; b = Z
#match dup(S(x)) = (a, b) => (sa, sb) = dup(x); s = S(sa); b = S(sb)
#match dup(dup(_) = (c, d)) = (a, b) => (c, d)
#match S(x) = S(y) => x = y

# Multiplication
def _ * y = r
#  | Z    => erase(y), Z
#  | S(x) => (y1, y2) = dup(y); x * y1 + y2

match Z * y => erase(y); Z
match S(x) * y => (y1, y2) = dup(y); x * y1 + y2

# Example: Computations on church numerals
let y = 5n
    x = 3n
    example_3_plus_5 = x + y

let example_3_times_2 = 3n * 2n

# Currying on additional args:
def foo(a, b) = r
  | Z           => erase(b); Z
  | S(x), S(y)  => x + y
let foo_curry = foo(1n, 2n)
